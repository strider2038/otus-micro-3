/*
 * User Service
 *
 * This is simple client API
 *
 * API version: 1.0.0
 * Contact: schetinnikov@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package users

import (
	"context"
	"errors"

	"github.com/muonsoft/validation"
	"github.com/muonsoft/validation/it"
)

var ErrUserNotFound = errors.New("user not found")

type User struct {
	ID        int64  `json:"id,omitempty"`
	Username  string `json:"username,omitempty"`
	FirstName string `json:"firstName,omitempty"`
	LastName  string `json:"lastName,omitempty"`
	Email     string `json:"email,omitempty"`
	Phone     string `json:"phone,omitempty"`
}

func (u User) Validate(ctx context.Context, validator *validation.Validator) error {
	return validator.Validate(
		ctx,
		validation.StringProperty("username", u.Username, it.HasLengthBetween(1, 100)),
		validation.StringProperty("firstName", u.FirstName, it.HasLengthBetween(1, 100)),
		validation.StringProperty("lastName", u.LastName, it.HasLengthBetween(1, 100)),
		validation.StringProperty("email", u.Email, it.HasLengthBetween(1, 100), it.IsEmail()),
		validation.StringProperty("phone", u.LastName, it.HasMaxLength(20)),
	)
}

type Repository interface {
	FindByID(ctx context.Context, id int64) (*User, error)
	CountByUsername(ctx context.Context, username string) (int64, error)
	CountByEmail(ctx context.Context, email string) (int64, error)
	Save(ctx context.Context, user *User) error
	Delete(ctx context.Context, id int64) error
}
