// Code generated by sqlc. DO NOT EDIT.
// source: query.sql

package database

import (
	"context"
)

const countUsersByEmail = `-- name: CountUsersByEmail :one
SELECT count(id)
FROM "user"
WHERE email = $1
`

func (q *Queries) CountUsersByEmail(ctx context.Context, email string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByEmail, email)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const countUsersByUsername = `-- name: CountUsersByUsername :one
SELECT count(id)
FROM "user"
WHERE username = $1
`

func (q *Queries) CountUsersByUsername(ctx context.Context, username string) (int64, error) {
	row := q.db.QueryRow(ctx, countUsersByUsername, username)
	var count int64
	err := row.Scan(&count)
	return count, err
}

const createUser = `-- name: CreateUser :one
INSERT INTO "user" (username, first_name, last_name, email, phone)
VALUES ($1, $2, $3, $4, $5)
RETURNING id, username, first_name, last_name, email, phone
`

type CreateUserParams struct {
	Username  string
	FirstName string
	LastName  string
	Email     string
	Phone     string
}

func (q *Queries) CreateUser(ctx context.Context, arg CreateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, createUser,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const deleteUser = `-- name: DeleteUser :exec
DELETE
FROM "user"
WHERE id = $1
`

func (q *Queries) DeleteUser(ctx context.Context, id int64) error {
	_, err := q.db.Exec(ctx, deleteUser, id)
	return err
}

const findUser = `-- name: FindUser :one
SELECT id, username, first_name, last_name, email, phone
FROM "user"
WHERE id = $1
LIMIT 1
`

func (q *Queries) FindUser(ctx context.Context, id int64) (User, error) {
	row := q.db.QueryRow(ctx, findUser, id)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
	)
	return i, err
}

const updateUser = `-- name: UpdateUser :one
UPDATE "user"
SET username = $2, first_name = $3, last_name = $4, email = $5, phone = $6
WHERE id = $1
RETURNING id, username, first_name, last_name, email, phone
`

type UpdateUserParams struct {
	ID        int64
	Username  string
	FirstName string
	LastName  string
	Email     string
	Phone     string
}

func (q *Queries) UpdateUser(ctx context.Context, arg UpdateUserParams) (User, error) {
	row := q.db.QueryRow(ctx, updateUser,
		arg.ID,
		arg.Username,
		arg.FirstName,
		arg.LastName,
		arg.Email,
		arg.Phone,
	)
	var i User
	err := row.Scan(
		&i.ID,
		&i.Username,
		&i.FirstName,
		&i.LastName,
		&i.Email,
		&i.Phone,
	)
	return i, err
}
