/*
 * User Service
 *
 * This is simple client API
 *
 * API version: 1.0.0
 * Contact: schetinnikov@gmail.com
 * Generated by: OpenAPI Generator (https://openapi-generator.tech)
 */

package api

import (
	"context"
	"errors"
	"fmt"
	"net/http"

	"user-service/internal/users"

	"github.com/muonsoft/validation/validator"
)

// UserApiService is a service that implents the logic for the UserApiServicer
// This service should implement the business logic for every endpoint for the UserApi API.
// Include any external packages or services that will be required by this service.
type UserApiService struct {
	users users.Repository
}

// NewUserApiService creates a default api service
func NewUserApiService(users users.Repository) UserApiServicer {
	return &UserApiService{users: users}
}

// FindUserById -
func (s *UserApiService) FindUserById(ctx context.Context, userId int64) (ImplResponse, error) {
	user, err := s.users.FindByID(ctx, userId)
	if errors.Is(err, users.ErrUserNotFound) {
		return Response(
			http.StatusNotFound,
			Error{Code: http.StatusNotFound, Message: err.Error()},
		), nil
	}
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusOK, user), nil
}

// CreateUser - Create user
func (s *UserApiService) CreateUser(ctx context.Context, user users.User) (ImplResponse, error) {
	err := validator.ValidateValidatable(ctx, user)
	if err != nil {
		return Response(
			http.StatusUnprocessableEntity,
			Error{Code: http.StatusUnprocessableEntity, Message: err.Error()},
		), nil
	}

	count, err := s.users.CountByUsername(ctx, user.Username)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	if count > 0 {
		return Response(
			http.StatusUnprocessableEntity,
			Error{
				Code:    http.StatusUnprocessableEntity,
				Message: fmt.Sprintf(`user with name "%s" already exists`, user.Username),
			},
		), nil
	}

	count, err = s.users.CountByEmail(ctx, user.Email)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}
	if count > 0 {
		return Response(
			http.StatusUnprocessableEntity,
			Error{
				Code:    http.StatusUnprocessableEntity,
				Message: fmt.Sprintf(`user with email "%s" already exists`, user.Email),
			},
		), nil
	}

	err = s.users.Save(ctx, &user)
	if err != nil {
		return Response(http.StatusInternalServerError, user), err
	}

	return Response(http.StatusCreated, user), nil
}

// UpdateUser -
func (s *UserApiService) UpdateUser(ctx context.Context, userId int64, updatedUser users.User) (ImplResponse, error) {
	err := validator.ValidateValidatable(ctx, updatedUser)
	if err != nil {
		return Response(
			http.StatusUnprocessableEntity,
			Error{Code: http.StatusUnprocessableEntity, Message: err.Error()},
		), nil
	}

	user, err := s.users.FindByID(ctx, userId)
	if errors.Is(err, users.ErrUserNotFound) {
		return Response(
			http.StatusNotFound,
			Error{Code: http.StatusNotFound, Message: err.Error()},
		), nil
	}
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	if user.Email != updatedUser.Email {
		count, err := s.users.CountByEmail(ctx, updatedUser.Email)
		if err != nil {
			return Response(http.StatusInternalServerError, nil), err
		}
		if count > 0 {
			return Response(
				http.StatusUnprocessableEntity,
				Error{
					Code:    http.StatusUnprocessableEntity,
					Message: fmt.Sprintf(`user with email "%s" already exists`, updatedUser.Email),
				},
			), nil
		}
	}

	user.FirstName = updatedUser.FirstName
	user.LastName = updatedUser.LastName
	user.Email = updatedUser.Email
	user.Phone = updatedUser.Phone

	err = s.users.Save(ctx, user)
	if err != nil {
		return Response(http.StatusInternalServerError, user), err
	}

	return Response(http.StatusOK, user), nil
}

// DeleteUser -
func (s *UserApiService) DeleteUser(ctx context.Context, userId int64) (ImplResponse, error) {
	err := s.users.Delete(ctx, userId)
	if err != nil {
		return Response(http.StatusInternalServerError, nil), err
	}

	return Response(http.StatusNoContent, nil), nil
}
